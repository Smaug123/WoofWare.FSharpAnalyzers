WOOF-REFEQUALS | Warning | (8,4--8,33) | Object.ReferenceEquals should be avoided. It silently does the wrong thing on value types, and lacks type safety - it's too easy to accidentally compare objects of different types. Use a type-safe wrapper like 'let referenceEquals<'a when 'a : not struct> (x : 'a) (y : 'a) : bool = ...' instead. Suppress with comment including text 'ReferenceEquals allowed'.
WOOF-REFEQUALS | Warning | (11,4--11,43) | Object.ReferenceEquals should be avoided. It silently does the wrong thing on value types, and lacks type safety - it's too easy to accidentally compare objects of different types. Use a type-safe wrapper like 'let referenceEquals<'a when 'a : not struct> (x : 'a) (y : 'a) : bool = ...' instead. Suppress with comment including text 'ReferenceEquals allowed'.
WOOF-REFEQUALS | Warning | (16,4--16,35) | Object.ReferenceEquals should be avoided. It silently does the wrong thing on value types, and lacks type safety - it's too easy to accidentally compare objects of different types. Use a type-safe wrapper like 'let referenceEquals<'a when 'a : not struct> (x : 'a) (y : 'a) : bool = ...' instead. Suppress with comment including text 'ReferenceEquals allowed'.
WOOF-REFEQUALS | Warning | (22,4--22,33) | Object.ReferenceEquals should be avoided. It silently does the wrong thing on value types, and lacks type safety - it's too easy to accidentally compare objects of different types. Use a type-safe wrapper like 'let referenceEquals<'a when 'a : not struct> (x : 'a) (y : 'a) : bool = ...' instead. Suppress with comment including text 'ReferenceEquals allowed'.
WOOF-REFEQUALS | Warning | (28,4--28,33) | Object.ReferenceEquals should be avoided. It silently does the wrong thing on value types, and lacks type safety - it's too easy to accidentally compare objects of different types. Use a type-safe wrapper like 'let referenceEquals<'a when 'a : not struct> (x : 'a) (y : 'a) : bool = ...' instead. Suppress with comment including text 'ReferenceEquals allowed'.
WOOF-REFEQUALS | Warning | (32,4--32,56) | Object.ReferenceEquals should be avoided. It silently does the wrong thing on value types, and lacks type safety - it's too easy to accidentally compare objects of different types. Use a type-safe wrapper like 'let referenceEquals<'a when 'a : not struct> (x : 'a) (y : 'a) : bool = ...' instead. Suppress with comment including text 'ReferenceEquals allowed'.
