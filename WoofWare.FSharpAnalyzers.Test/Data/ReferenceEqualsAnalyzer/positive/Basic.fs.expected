WOOF-REFEQUALS | Warning | (8,4--8,33) | Object.ReferenceEquals should be avoided. It silently does the wrong thing on value types, and lacks type safety - it's too easy to accidentally compare objects of different types. Use a type-safe wrapper like 'let referenceEquals<'a when 'a : not struct> (x : 'a) (y : 'a) : bool = ...' instead. Suppress with comment including text 'ANALYZER: ReferenceEquals allowed'.
WOOF-REFEQUALS | Warning | (10,36--10,75) | Object.ReferenceEquals should be avoided. It silently does the wrong thing on value types, and lacks type safety - it's too easy to accidentally compare objects of different types. Use a type-safe wrapper like 'let referenceEquals<'a when 'a : not struct> (x : 'a) (y : 'a) : bool = ...' instead. Suppress with comment including text 'ANALYZER: ReferenceEquals allowed'.
WOOF-REFEQUALS | Warning | (15,4--15,35) | Object.ReferenceEquals should be avoided. It silently does the wrong thing on value types, and lacks type safety - it's too easy to accidentally compare objects of different types. Use a type-safe wrapper like 'let referenceEquals<'a when 'a : not struct> (x : 'a) (y : 'a) : bool = ...' instead. Suppress with comment including text 'ANALYZER: ReferenceEquals allowed'.
WOOF-REFEQUALS | Warning | (21,4--21,33) | Object.ReferenceEquals should be avoided. It silently does the wrong thing on value types, and lacks type safety - it's too easy to accidentally compare objects of different types. Use a type-safe wrapper like 'let referenceEquals<'a when 'a : not struct> (x : 'a) (y : 'a) : bool = ...' instead. Suppress with comment including text 'ANALYZER: ReferenceEquals allowed'.
WOOF-REFEQUALS | Warning | (27,4--27,33) | Object.ReferenceEquals should be avoided. It silently does the wrong thing on value types, and lacks type safety - it's too easy to accidentally compare objects of different types. Use a type-safe wrapper like 'let referenceEquals<'a when 'a : not struct> (x : 'a) (y : 'a) : bool = ...' instead. Suppress with comment including text 'ANALYZER: ReferenceEquals allowed'.
WOOF-REFEQUALS | Warning | (31,4--31,56) | Object.ReferenceEquals should be avoided. It silently does the wrong thing on value types, and lacks type safety - it's too easy to accidentally compare objects of different types. Use a type-safe wrapper like 'let referenceEquals<'a when 'a : not struct> (x : 'a) (y : 'a) : bool = ...' instead. Suppress with comment including text 'ANALYZER: ReferenceEquals allowed'.
